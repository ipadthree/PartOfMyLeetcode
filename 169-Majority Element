/*This is my version 1.0, I didn't use divide and conquer nor bit manipulation...
  The idea is simple, sort the array first, then while traversing the array, using a variant to track 
  if the current pointed element has occured nums.size()/2 time, if it is, just return the element, 
  if it isn't increment the variant.
  When the element changes, reset the variant to 1 and start again until finding the majority.*/

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        sort(nums.begin(),nums.end());
        int major = 1;
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] == nums[i-1]){
                major++;
                if(major > nums.size()/2) return nums[i];
            }else{
                major = 1;
            }
        }
        return 0;
    }
};
