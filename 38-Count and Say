// My idea, which took me 40 minutes to finally make it accepted.


class Solution {
public:
    string countAndSay(int n) {
    string res = "1";
    if(n <= 1) return res;
    res = "11";
    for(int i = 2; i < n; i++){
        string done = res;
        res = "";
        int track = done.size()-1;
        int count = 1;
        while(track > 0){
            if(done[track] != done[track-1]){
                res = to_string(count) + done[track] + res;
                if(track == 1){
                    res = to_string(1) + done[0] + res;
                }
                count = 1;
            }else{
                count++;
                if(track == 1){
                    res = to_string(count) + done[track] + res;
                }
            }
            track--;
        }
    }
    return res;
}
};



//This is someone else's idea, it is more concise.

std::string countAndSay(int n) {

        if (0 == n) return "";  
        if (1 == n) return "1";

        std::string res="1";
        std::string s;

        for (int i = 1; i < n; i++){    // run from starting to generate second string

            int len = res.size();

            //cheack all digits in the string
            for (int j = 0; j < len; j++){  

                int count=1; // we have at least 1 occourence of each digit

                // get the number of times same digit occurred (be carefull with the end of the string)
                while ((j + 1 < len) && (res[j] == res[j + 1])){
                    count++;    
                    j++;        // we need to keep increasing the index inside of the string
                }

                // add to new string "count"+"digit itself"
                s += std::to_string(count) + res[j];
            }

            // save temporary result
            res = s;

            // clean our string-helper
            s.clear();

        }

        return res;
    }
