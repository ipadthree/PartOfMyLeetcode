/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 
 //This is other people's idea, I just retyped it;
 
 
 
class Solution {
public:
    ListNode* mergeLists(ListNode* n1, ListNode* n2){
        if(!n1) return n2;
        if(!n2) return n1;
        if(n1->val <= n2->val){
            n1->next = mergeLists(n1->next, n2);
            return n1;
        }
        if(n1->val > n2->val){
            n2->next = mergeLists(n1, n2->next);
            return n2;
        }
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        int len = lists.size();
        while(len > 1){
            for(int i = 0; i < len / 2; i++){
                lists[i] = mergeLists(lists[i], lists[len - i - 1]);
            }
            len = (len + 1) / 2;
        }
        return lists.front();
    }
};



ListNode *mergeKLists(vector<ListNode *> &lists) {
    if(lists.empty()){
        return nullptr;
    }
    while(lists.size() > 1){
        lists.push_back(mergeTwoLists(lists[0], lists[1]));
        lists.erase(lists.begin());
        lists.erase(lists.begin());
    }
    return lists.front();
}
ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
    if(l1 == nullptr){
        return l2;
    }
    if(l2 == nullptr){
        return l1;
    }
    if(l1->val <= l2->val){
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    }
    else{
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}
