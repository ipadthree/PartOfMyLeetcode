//Total copy of N-Queen 


class Solution {
public:
    void solvenqueen(int &result, vector<string> &nqueen, int row, int n){
        if(row == n){
            result++;
            return;
        }
        for(int col= 0; col < n; col++){
            if(isvalid(nqueen,row,col,n)){
                nqueen[row][col] = 'Q';
                solvenqueen(result,nqueen,row+1,n);
                nqueen[row][col] = '.';
            }
        }
    }
    bool isvalid(vector<string> &nqueen,int row,int col,int n){
        //check if the column had a queen before.
        for (int i = 0; i != row; ++i)
            if (nqueen[i][col] == 'Q')
                return false;
        //check if the 45° diagonal had a queen before.
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j)
            if (nqueen[i][j] == 'Q')
                return false;
        //check if the 135° diagonal` had a queen before.
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j)
            if (nqueen[i][j] == 'Q')
                return false;
        return true;
    }
    int totalNQueens(int n) {
        int result = 0;
        vector<string> nqueen(n,string(n,'.'));
        solvenqueen(result,nqueen,0,n);
        return result;
    }
};
