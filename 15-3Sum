//version 1.5

class Solution {
public:
vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> result;
    if(nums.empty()) return result;
    sort(nums.begin(), nums.end());
    if(nums[0] > 0 || nums.size() < 3) return result;
    for(int i = 0; i < nums.size();){
       // if(nums[i] > 0) break;
        int start = i + 1;
        int end = nums.size() - 1;
        while(start < end){
            if(nums[i] + nums[start] + nums[end] == 0){
                result.push_back({nums[i], nums[start],nums[end]});
                start++;
                end--;
                while((start < end) && nums[start] == nums[start-1]) start++;
                while((start < end) && nums[end] == nums[end+1]) end--;
            }else if(nums[i] + nums[start] + nums[end] < 0){
                start++;
                while((start < end) && (nums[start-1] == nums[start])) start++;
            }else{
                end--;
                while((start < end) && (nums[end] == nums[end + 1])) end--;
            }
        }
        i++;
        while(i < nums.size() && nums[i] == nums[i-1]){
            i++;
        }
    }
    return result;      
}
};






//version 2.0




class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size() < 3) return vector<vector<int>>(NULL);
        vector<vector<int>> result;
        sort(nums.begin(),nums.end());
        int first = 0;
        while(first < nums.size() - 2){
            int second = first + 1;
            int third = nums.size() - 1;
            while(second < third){
                if(nums[first] + nums[second] + nums[third] == 0){
                    vector<int> newline = {nums[first],nums[second],nums[third]};
                    result.push_back(newline);
                    second++;
                    while(nums[second] == nums[second-1]) second++;
                    /*third--;
                    while(nums[third] == nums[third+1]) third--;
                    This is to avoid the infinite loop, any or both is okay*/
                }
                if(nums[first] + nums[second] + nums[third] > 0){
                    third--;
                    while(nums[third] == nums[third+1]) third--;
                }
                if(nums[first] + nums[second] + nums[third] < 0){
                    second++;
                    while(nums[second] == nums[second-1]) second++;
                }
            }
            first++;
            while(nums[first] == nums[first-1]) first++;
        }
        return result;
    }
};
