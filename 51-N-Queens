//Totally other's idea.


In this problem, we can go row by row, and in each position, we need to check if the column, the 45° diagonal and the 135° diagonal had a queen before.

Solution A: Directly check the validity of each position, 12ms:

class Solution {
public:
    void solvenqueen(vector<vector<string>> &result, vector<string> &nqueen, int row, int n){
        if(row == n){
            result.push_back(nqueen);
            return;
        }
        for(int col= 0; col < n; col++){
            if(isvalid(nqueen,row,col,n)){
                nqueen[row][col] = 'Q';
                solvenqueen(result,nqueen,row+1,n);
                nqueen[row][col] = '.';
            }
        }
    }
    bool isvalid(vector<string> &nqueen,int row,int col,int n){
        //check if the column had a queen before.
        for (int i = 0; i != row; ++i)
            if (nqueen[i][col] == 'Q')
                return false;
        //check if the 45° diagonal had a queen before.
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j)
            if (nqueen[i][j] == 'Q')
                return false;
        //check if the 135° diagonal` had a queen before.
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j)
            if (nqueen[i][j] == 'Q')
                return false;
        return true;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<string> nqueen(n,string(n,'.'));
        solvenqueen(result,nqueen,0,n);
        return result;
    }
};





Solution B: Use flag vectors as bitmask, 4ms:

The number of columns is n, the number of 45° diagonals is 2 * n - 1, 
the number of 135° diagonals is also 2 * n - 1. When reach [row, col], the column No. is col, the 45° diagonal
No. is row + col and the 135° diagonal No. is n - 1 + col - row. We can use three arrays to mask if the column or the
diagonal had a queen before, if not, we can put a queen in this position and continue.

/**    | | |                / / /             \ \ \
  *    O O O               O O O               O O O
  *    | | |              / / / /             \ \ \ \
  *    O O O               O O O               O O O
  *    | | |              / / / /             \ \ \ \ 
  *    O O O               O O O               O O O
  *    | | |              / / /                 \ \ \
  *   3 columns        5 45° diagonals     5 135° diagonals    (when n is 3)
  */
class Solution {
public:
    std::vector<std::vector<std::string> > solveNQueens(int n) {
        std::vector<std::vector<std::string> > res;
        std::vector<std::string> nQueens(n, std::string(n, '.'));
        std::vector<int> flag_col(n, 1), flag_45(2 * n - 1, 1), flag_135(2 * n - 1, 1);
        solveNQueens(res, nQueens, flag_col, flag_45, flag_135, 0, n);
        return res;
    }
private:
    void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, std::vector<int> &flag_col, std::vector<int> &flag_45, std::vector<int> &flag_135, int row, int &n) {
        if (row == n) {
            res.push_back(nQueens);
            return;
        }
        for (int col = 0; col != n; ++col)
            if (flag_col[col] && flag_45[row + col] && flag_135[n - 1 + col - row]) {
                flag_col[col] = flag_45[row + col] = flag_135[n - 1 + col - row] = 0;
                nQueens[row][col] = 'Q';
                solveNQueens(res, nQueens, flag_col, flag_45, flag_135, row + 1, n);
                nQueens[row][col] = '.';
                flag_col[col] = flag_45[row + col] = flag_135[n - 1 + col - row] = 1;
            }
    }
};
But we actually do not need to use three mask arrays, we just need one. Now, when reach [row, col], 
the subscript of column is col, the subscript of 45° diagonal is n + row + col 
and the subscript of 135° diagonal is n + 2 * n - 1 + n - 1 + col - row.

class Solution {
public:
    std::vector<std::vector<std::string> > solveNQueens(int n) {
        std::vector<std::vector<std::string> > res;
        std::vector<std::string> nQueens(n, std::string(n, '.'));
        /*
        flag[0] to flag[n - 1] to mask if the column had a queen before.
        flag[n] to flag[3 * n - 2] to mask if the 45° diagonal had a queen before.
        flag[3 * n - 1] to flag[5 * n - 3] to mask if the 135° diagonal had a queen before.
        */
        std::vector<int> flag(5 * n - 2, 1);
        solveNQueens(res, nQueens, flag, 0, n);
        return res;
    }
private:
    void solveNQueens(std::vector<std::vector<std::string> > &res, std::vector<std::string> &nQueens, std::vector<int> &flag, int row, int &n) {
        if (row == n) {
            res.push_back(nQueens);
            return;
        }
        for (int col = 0; col != n; ++col)
            if (flag[col] && flag[n + row + col] && flag[4 * n - 2 + col - row]) {
                flag[col] = flag[n + row + col] = flag[4 * n - 2 + col - row] = 0;
                nQueens[row][col] = 'Q';
                solveNQueens(res, nQueens, flag, row + 1, n);
                nQueens[row][col] = '.';
                flag[col] = flag[n + row + col] = flag[4 * n - 2 + col - row] = 1;
            }
    }
};
