//My version 1.0

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        if(!head) return NULL;
        ListNode *sorted = head;
        //ListNode *tobesort = sorted->next;
        while(sorted->next){
            if(sorted->next->val >= sorted->val){
                sorted = sorted->next;
                continue;
            }
            int val = sorted->next->val;
            ListNode *check = head;
            delete sorted->next;
            sorted->next = sorted->next->next;
            while(val >= check->val && check != sorted){
                if(val < check->next->val){
                    ListNode *newnode = new ListNode(val);
                    newnode->next = check->next;
                    check->next = newnode;
                    break;
                }
                check = check->next;
            }
            if(check == head && val < check->val){
                ListNode *newnode = new ListNode(val);
                newnode->next = head;
                head = newnode;
            }
            //sorted = sorted->next;
        }
        return head;
    }
};

//From discuss section

One of the quotes is

For God's sake, don't try sorting a linked list during the interview
http://steve-yegge.blogspot.nl/2008/03/get-that-job-at-google.html

So it might be better to actually copy the values into an array and sort them there.



Well, life gets difficult pretty soon whenever the same operation on array is transferred to linked list.

First, a quick recap of insertion sort:

Start from the second element (simply a[1] in array and the annoying head -> next -> val in linked list), 
each time when we see a node with val smaller than its previous node, we scan from the head and find the position that 
the current node should be inserted. Since a node may be inserted before head, we create a new_head that points to head. 
The insertion operation, however, is a little easier for linked list.

Now comes the code:

class Solution { 
public:
    ListNode* insertionSortList(ListNode* head) {
        ListNode* new_head = new ListNode(0);
        new_head -> next = head;
        ListNode* pre = new_head;
        ListNode* cur = head;
        while (cur) {
            if (cur -> next && cur -> next -> val < cur -> val) {
                while (pre -> next && pre -> next -> val < cur -> next -> val)
                    pre = pre -> next;
                /* Insert cur -> next after pre.*/
                ListNode* temp = pre -> next;
                pre -> next = cur -> next;
                cur -> next = cur -> next -> next;
                pre -> next -> next = temp;
                /* Move pre back to new_head. */
                pre = new_head;
            }
            else cur = cur -> next;
        }
        ListNode* res = new_head -> next;
        delete new_head;
        return res;
    }
};
