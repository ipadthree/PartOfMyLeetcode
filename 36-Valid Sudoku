//My idea, save space, but when checking subbox, there is a fourth time loop...

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<int> hashmap(9,0);
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(board[i][j] != '.'){
                    if(hashmap[board[i][j] - '0' - 1] == 1) return false;
                    hashmap[board[i][j] - '0' - 1] = 1;
                }
            }
            hashmap = {0,0,0,0,0,0,0,0,0};
        }
        for(int i = 0; i < board[0].size(); i++){
            for(int j = 0; j < board.size(); j++){
                if(board[j][i] != '.'){
                    if(hashmap[board[j][i] - '0' - 1] == 1) return false;
                    hashmap[board[j][i] - '0' - 1] = 1;
                }
            }
            hashmap = {0,0,0,0,0,0,0,0,0};
        }
        for(int row = 0; row < board[0].size(); row += 3){
            for(int col = 0; col < board.size(); col += 3){
                for(int i = 0; i < 3; i++){
                    for(int j = 0; j < 3; j++){
                        if(board[row+i][col+j] != '.'){
                            if(hashmap[board[row+i][col+j] - '0' - 1] == 1) return false;
                            hashmap[board[row+i][col+j] - '0' - 1] = 1;
                        }
                    }
                }
                hashmap = {0,0,0,0,0,0,0,0,0};
            }
        }
        return true;
    }
};





//another idea;

class Solution
{
public:
    bool isValidSudoku(vector<vector<char> > &board)
    {
        int used1[9][9] = {0}, used2[9][9] = {0}, used3[9][9] = {0};

        for(int i = 0; i < board.size(); ++ i)
            for(int j = 0; j < board[i].size(); ++ j)
                if(board[i][j] != '.')
                {
                    int num = board[i][j] - '0' - 1, k = i / 3 * 3 + j / 3;
                    if(used1[i][num] || used2[j][num] || used3[k][num])
                        return false;
                    used1[i][num] = used2[j][num] = used3[k][num] = 1;
                }

        return true;
    }
};
