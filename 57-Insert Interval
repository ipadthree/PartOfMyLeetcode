By far the best solution I have seen is of O(n) time (some solutions claim to be of O(logn) turns out to be O(n)). 
One of the simplest ideas is to compare each interval in intervals (intervals[i]) with newInterval and then perform respective 
operations according to their relationships.

If they overlap, merge them to newInterval;
If intervals[i] is to the left of newInterval, push intervals[i] to the result vector;
If newInterval is to the left of intervals[i], push newInterval and all the remaining intervals 
(intervals[i], ..., intervals[n - 1]) to the result vector.
The code is as follows.

class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> res;
        int n = intervals.size();
        for (int i = 0; i < n; i++) {
            if (intervals[i].end < newInterval.start)
                res.push_back(intervals[i]);
            else if (newInterval.end < intervals[i].start) {
                res.push_back(newInterval);
                for (int j = i; j < n; j++)
                    res.push_back(intervals[j]);
                return res; 
            }
            else newInterval = merge(intervals[i], newInterval);
        }
        res.push_back(newInterval);
        return res;
    }
private:
    Interval merge(Interval& interval1, Interval& interval2) {
        int start = min(interval1.start, interval2.start);
        int end = max(interval1.end, interval2.end);
        return Interval(start, end);
    }
};
Another idea is to search for the two ends of the overlapping intervals using binary search. 
Then we only need to merge newInterval with the intervals at the two ends if they overlap. All the intervals 
within the two ends 
will be contained innewInterval.

Let's do the example in the problem statement: intervals = [1, 2], [3, 5], [6, 7], [8, 10], [12, 16] and newInterval = [4, 9]. 
We first find the rightmost interval with start smaller than that of newInterval, which is [3, 5]. Then we find the leftmost
interval with end larger than that of newInterval, which is [8, 10]. Then all the intervals between them will be contained within 
newInterval (you may check this to convince yourself) and so can be safely ignored. We only need to check whether newInterval 
overlaps with the two intervals on the two ends and merge them if necessary.

The complete code is as follows.

class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int n = intervals.size(), leftEnd, rightEnd, l, r;
        vector<Interval> res;
        // Find the rightmost interval with start smaller than that of newInterval
        for (l = 0, r = n - 1; l <= r; ) {
            int mid = l + ((r - l) >> 1);
            if (intervals[mid].start > newInterval.start)
                r = mid - 1;
            else l = mid + 1;
        } 
        leftEnd = r;
        // Find the leftmost interval with end larger than that of newInterval
        for (l = 0, r = n - 1; l <= r; ) {
            int mid = l + ((r - l) >> 1);
            if (intervals[mid].end < newInterval.end)
                l = mid + 1;
            else r = mid - 1;
        }
        rightEnd = l;
        // Merge newInterval with intervals[leftEnd] and intervals[rightEnd] if necessary
        if (leftEnd >= 0 && intervals[leftEnd].end >= newInterval.start)
            newInterval.start = intervals[leftEnd--].start;
        if (rightEnd < n && intervals[rightEnd].start <= newInterval.end)
            newInterval.end = intervals[rightEnd++].end;
        // Save the intervals sequentially
        for (int i = 0; i <= leftEnd; i++)
            res.push_back(intervals[i]);
        res.push_back(newInterval);
        for (int i = rightEnd; i < n; i++)
            res.push_back(intervals[i]);
        return res;
    }
};
