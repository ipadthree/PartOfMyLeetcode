/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 //MY ugly version 1.0
 
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head) return NULL;
        ListNode *a = head, *b = a->next;
        if(!b) return a;
        ListNode *res = b;
       // ListNode *temp = new ListNode(0);
        while(b){
            if(b->next){
                ListNode *c = a, *d = b;
                //temp = b->next->next;
                a = b->next;
                b = b->next->next;
                if(b) {
                    c->next = b;
                }else{
                    c->next = a;
                }
                d->next = c;
            }else{
                a->next = NULL;
                b->next = a;
                break;
            }
        }
        return res;
    }
};


//Other's answer.

ListNode* swapPairs(ListNode* head) {
        if (head == NULL || head->next == NULL) return head;
        ListNode *grandChild = swapPairs(head->next->next);
        ListNode *child = head->next;
        child->next = head;
        head->next = grandChild;
        return child;
    }
    
    
    C++

Pointer-pointer pp points to the pointer to the current node. So at first, pp points to head, and later it points to 
the next field of ListNodes. Additionally, for convenience and clarity, pointers a and b point to the current node and the next
node.

We need to go from *pp == a -> b -> (b->next) to *pp == b -> a -> (b->next). The first three lines inside the loop do that, 
setting those three pointers (from right to left). The fourth line moves pp to the next pair.

ListNode* swapPairs(ListNode* head) {
    ListNode **pp = &head, *a, *b;
    while ((a = *pp) && (b = a->next)) {
        a->next = b->next;
        b->next = a;
        *pp = b;
        pp = &(a->next);
    }
    return head;
}

