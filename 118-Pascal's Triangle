/*This problem is not diffcult, following is my code.
  I think my next step is to combine the boundary conditions and write more consice code.*/


class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> tower;
        if(numRows == 0) return tower;
        tower.push_back({1});
        if(numRows == 1) return tower;
        tower.push_back({1,1});
        if(numRows == 2) return tower;
        for(int i = 2; i < numRows; i++){
            vector<int> newline(i+1,1);
            for(int j = 1; j < i; j++){
                newline[j] = tower[i-1][j-1] + tower[i-1][j];
            }
            tower.push_back(newline);
        }
        return tower;
    }
};



//However, this more consice solution from discuss section


vector<vector<int> > generate(int numRows) {
        vector<vector<int>> r(numRows);
        for (int i = 0; i < numRows; i++) {
            r[i].resize(i + 1);
            r[i][0] = r[i][i] = 1;
            for (int j = 1; j < i; j++)
                r[i][j] = r[i - 1][j - 1] + r[i - 1][j];
        }
        return r;
    }
