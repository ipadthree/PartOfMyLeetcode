/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 //I rewrote other's code
 
class Solution {
public:
    vector<TreeNode*> generate(int from, int to){
        vector<TreeNode*> result;
        if(from > to) result.push_back(NULL);
        if(from == to) result.push_back(new TreeNode(to));
        if(from < to){
            for(int i = from; i <= to; i++){
                /*1. 根节点可以任取min ~ max (例如min  = 1, max = n)，假如取定为i。
                  2. 则left subtree由min ~ i-1组成，假设可以有L种可能。
                  right subtree由i+1 ~ max组成，假设有R种可能。生成所有可能的left/right subtree。
                  3. 对于每个生成的left subtree/right subtree组合<T_left(p), T_right(q)>，p = 1...L，q = 1...R，
                  添加上根节点i而组成一颗新树。*/
                vector<TreeNode*> left = generate(from,i-1);
                vector<TreeNode*> right = generate(i+1,to);
                for(int j = 0; j < left.size(); j++){
                    for(int k = 0; k < right.size(); k++){
                        TreeNode* head = new TreeNode(i);
                        head->left = left[j];
                        head->right = right[k];
                        result.push_back(head);
                    }
                }
            }
        }
        return result;
    }
    vector<TreeNode*> generateTrees(int n) {
        return generate(1,n);
    }
};
