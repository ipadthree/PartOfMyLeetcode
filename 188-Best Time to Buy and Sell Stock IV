Why if k>n/2 then this question becomes BEST TIME TO BUY AND SELL STOCK II?

I saw some solutions use the condition: if(k >= n/2) then it is said that this question becomes 
"BEST TIME TO BUY AND SELL STOCK II", in which case you can have unlimited transactions. Suppose we have 
7 days (n=7) so the above condition implies that as long as we have k >= 7/2 (i.e k=3) we have unlimited transactions.
However, by definition, unlimited transactions means k=6. So we are actually saying that as long as we have k>=n/2=3, 
we are as good as if we have k=6.
I don't know if it is correct or not, but I cannot think of a case that this is wrong. 
Say you have 7 days prices, think of an price array that you will be better off having > 3 transactions
than <= 3 transactions. Can anyone think of such an example? If not then it is probably right. Sorry if this
is just too trivial to see.

/*Answer*/

First of all, we need to be clear of the definition of transaction. 
The first question in this series clearly states that "...one transaction (ie, buy one and sell one share of the stock)". 
Therefore, the whole period from buying to selling is considered one transaction, not two. To avoid confusion, 
I'll define 'buying' and 'selling' as an 'Operation'.
Secondly, when it says 'unlimited number of transaction', the number of possible transactions actually 
have nothing to do with the length of the array in theory. The problem does not prohibit buying and selling on the 
same day, nor does it say anything about how many operations you can do on one day. So technically, it is wrong to say 
that you can ONLY perform n/2 transaction; As a matter of fact, you can perform an infinite number of 
transaction (achievable by buying and selling multiple times on the same day).
But doing that is pointless because we don't earn any money that way. 
So what really matters to us is the number of 'MEANINGFUL TRANSACTIONS' in which we actually earns money.
That is to say, the transaction must include AT LEAST ONE RISING phase 
(Otherwise, we are losing money so we might as well not do the transaction at all). In an array of size N. 
There are at most N/2 rising phases. So we need at most k = N/2 transactions to cover all the rising phases. 
Therefore, if even more than N/2 transactions are allowed, we only need N/2 transactions to achieve the maximum profit. 
That's why we k is greater than N/2, we can effectively consider it to be "unlimited".



/*My answer inspired by others'*/

class Solution {
public:
int maxProfit(int k, vector<int>& prices) {
    if(prices.size() <= 1) return 0;
    int len = prices.size();
    /*If this k > len/2 is left, there is runtime error*/
    if (k>len/2){ // simple case
            int ans = 0;
            for (int i=1; i<len; ++i){
                ans += max(prices[i] - prices[i-1],0);
            }
            return ans;
        }
    vector<vector<int>> local(len,vector<int>(k+1,0));
    vector<vector<int>> global(len,vector<int>(k+1,0));
    for(int i = 1; i < len; i++){
        for(int j = 1; j <= k; j++){
            local[i][j] = max(global[i-1][j-1] + max(prices[i] - prices[i-1], prices[i] - prices[i]),
                              local[i-1][j] + prices[i] - prices[i-1]);
            global[i][j] = max(global[i-1][j],local[i][j]);
        }
    }
    return global[len-1][k];
}
};



//---------------Original but not complete answer--------------------------//

这里我们先解释最多可以进行k次交易的算法，然后最多进行两次我们只需要把k取成2即可。我们还是使用“局部最优和全局最优解法”。我们维护两种量，一个是当前到达第i天可以最多进行j次交易，最好的利润是多少（global[i][j]），另一个是当前到达第i天，最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少（local[i][j]）。下面我们来看递推式，全局的比较简单，
global[i][j]=max(local[i][j],global[i-1][j])，
也就是去当前局部最好的，和过往全局最好的中大的那个（因为最后一次交易如果包含当前天一定在局部最好的里面，否则一定在过往全局最优的里面）。
全局（到达第i天进行j次交易的最大收益） = max{局部（在第i天交易后，恰好满足j次交易），全局（到达第i-1天时已经满足j次交易）}

对于局部变量的维护，递推式是
local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)，
也就是看两个量，第一个是全局到i-1天进行j-1次交易，然后加上今天的交易，如果今天是赚钱的话（也就是前面只要j-1次交易，最后一次交易取当前天），第二个量则是取local第i-1天j次交易，然后加上今天的差值（这里因为local[i-1][j]比如包含第i-1天卖出的交易，所以现在变成第i天卖出，并不会增加交易次数，而且这里无论diff是不是大于0都一定要加上，因为否则就不满足local[i][j]必须在最后一天卖出的条件了）。
局部（在第i天交易后，总共交易了j次） =  max{情况2，情况1}
情况1：在第i-1天时，恰好已经交易了j次（local[i-1][j]），那么如果i-1天到i天再交易一次：即在第i-1天买入，第i天卖出（diff），则这不并不会增加交易次数！【例如我在第一天买入，第二天卖出；然后第二天又买入，第三天再卖出的行为  和   第一天买入，第三天卖出  的效果是一样的，其实只进行了一次交易！因为有连续性】
情况2：第i-1天后，共交易了j-1次（global[i-1][j-1]），因此为了满足“第i天过后共进行了j次交易，且第i天必须进行交易”的条件：我们可以选择1：在第i-1天买入，然后再第i天卖出（diff），或者选择在第i天买入，然后同样在第i天卖出（收益为0）。
