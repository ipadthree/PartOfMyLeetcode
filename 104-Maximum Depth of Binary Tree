//Nearly the same with 111
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(!root) return 0;
        int maxx = 0;
        queue <TreeNode *> myqueue;
        map <TreeNode*, int> mymap;
        myqueue.push(root);
        mymap[root] = 1;
        TreeNode *pro;
        while(!myqueue.empty()){
            pro = myqueue.front();
            myqueue.pop();
            if(!pro->left && !pro->right){
                maxx = max(maxx,mymap[pro]);
            }
            if(mymap.find(pro->left) == mymap.end() && pro->left){
                myqueue.push(pro->left);
                mymap[pro->left] = mymap[pro] + 1;
            }
            if(mymap.find(pro->right) == mymap.end() && pro->right){
                myqueue.push(pro->right);
                mymap[pro->right] = mymap[pro] + 1;
            }
        }
        return maxx;
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(!root) return 0;
        return max(maxDepth(root->left),maxDepth(root->right)) + 1;
    }
};
